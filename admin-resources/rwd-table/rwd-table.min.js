/*!
 * Responsive Tables v5.3.3 (http://gergeo.se/RWD-Table-Patterns)
 * This is an awesome solution for responsive tables with complex data.
 * Authors: Nadan Gergeo <nadan@blimp.se> (www.blimp.se), Lucas Wiener <lucas@blimp.se> & "Maggie Wachs (www.filamentgroup.com)"
 * Licensed under MIT (https://github.com/nadangergeo/RWD-Table-Patterns/blob/master/LICENSE-MIT)
 */
'use strict';
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(name) {
 return typeof name;
} : function(obj) {
 return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
!function($) {
 function isIOS() {
   return !!(navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i));
 }
 var ResponsiveTable = function ResponsiveTable(element, options) {
   var that = this;
   if (this.options = options, this.$tableWrapper = null, this.$tableScrollWrapper = $(element), this.$table = $(element).find("table"), 1 !== this.$table.length) {
     throw new Error("Exactly one table is expected in a .table-responsive div.");
   }
   this.$tableScrollWrapper.attr("data-pattern", this.options.pattern);
   this.id = this.$table.prop("id") || this.$tableScrollWrapper.prop("id") || "id" + Math.random().toString(16).slice(2);
   this.$tableClone = null;
   this.$stickyTableHeader = null;
   this.$thead = this.$table.find("thead");
   this.$hdrCells = this.$thead.find("tr").first().find("th");
   this.$bodyRows = this.$table.find("tbody, tfoot").find("tr");
   this.$btnToolbar = null;
   this.$dropdownGroup = null;
   this.$dropdownBtn = null;
   this.$dropdownContainer = null;
   this.$displayAllBtn = null;
   this.$focusGroup = null;
   this.$focusBtn = null;
   this.displayAllTrigger = "display-all-" + this.id + ".responsive-table";
   this.idPrefix = this.id + "-col-";
   this.headerColIndices = {};
   this.headerRowIndices = {};
   this.wrapTable();
   this.createButtonToolbar();
   this.buildHeaderCellIndices();
   this.setupTableHeader();
   this.setupBodyRows();
   if (this.options.stickyTableHeader) {
     this.createStickyTableHeader();
   }
   if (this.$dropdownContainer.is(":empty")) {
     this.$dropdownGroup.hide();
   }
   $(window).bind("orientationchange resize " + this.displayAllTrigger, function() {
     that.$dropdownContainer.find("input").trigger("updateCheck");
     $.proxy(that.updateSpanningCells(), that);
   }).trigger("resize");
 };
 ResponsiveTable.DEFAULTS = {
   pattern : "priority-columns",
   stickyTableHeader : true,
   fixedNavbar : ".navbar-fixed-top",
   addDisplayAllBtn : true,
   addFocusBtn : true,
   focusBtnIcon : "glyphicon glyphicon-screenshot",
   mainContainer : window,
   i18n : {
     focus : "Focus",
     display : "Display",
     displayAll : "Display all"
   }
 };
 ResponsiveTable.prototype.wrapTable = function() {
   this.$tableScrollWrapper.wrap('<div class="table-wrapper"/>');
   this.$tableWrapper = this.$tableScrollWrapper.parent();
 };
 ResponsiveTable.prototype.createButtonToolbar = function() {
   var that = this;
   this.$btnToolbar = $('[data-responsive-table-toolbar="' + this.id + '"]').addClass("btn-toolbar");
   if (0 === this.$btnToolbar.length) {
     this.$btnToolbar = $('<div class="btn-toolbar" />');
   }
   this.$dropdownGroup = $('<div class="btn-group dropdown-btn-group pull-right" />');
   this.$dropdownBtn = $('<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">' + this.options.i18n.display + ' <span class="caret"></span></button>');
   this.$dropdownContainer = $('<ul class="dropdown-menu"/>');
   if (this.options.addFocusBtn) {
     this.$focusGroup = $('<div class="btn-group focus-btn-group" />');
     this.$focusBtn = $('<button type="button" class="btn btn-default">' + this.options.i18n.focus + "</button>");
     if (this.options.focusBtnIcon) {
       this.$focusBtn.prepend('<span class="' + this.options.focusBtnIcon + '"></span> ');
     }
     // this.$focusGroup.append(this.$focusBtn);
     // this.$btnToolbar.append(this.$focusGroup);
     this.$focusBtn.click(function() {
       $.proxy(that.activateFocus(), that);
     });
     this.$bodyRows.click(function() {
       $.proxy(that.focusOnRow($(this)), that);
     });
   }
   if (this.options.addDisplayAllBtn) {
     this.$displayAllBtn = $('<button type="button" class="btn btn-default">' + this.options.i18n.displayAll + "</button>");
     this.$dropdownGroup.append(this.$displayAllBtn);
     if (this.$table.hasClass("display-all")) {
       this.$displayAllBtn.addClass("btn-primary");
     }
     this.$displayAllBtn.click(function() {
       $.proxy(that.displayAll(null, true), that);
     });
   }
   this.$dropdownGroup.append(this.$dropdownBtn).append(this.$dropdownContainer);
   this.$btnToolbar.append(this.$dropdownGroup);
   this.$tableScrollWrapper.before(this.$btnToolbar);
 };
 ResponsiveTable.prototype.clearAllFocus = function() {
   this.$bodyRows.removeClass("unfocused");
   this.$bodyRows.removeClass("focused");
 };
 ResponsiveTable.prototype.activateFocus = function() {
   this.clearAllFocus();
   if (this.$focusBtn) {
     this.$focusBtn.toggleClass("btn-primary");
   }
   this.$table.toggleClass("focus-on");
 };
 ResponsiveTable.prototype.focusOnRow = function(row) {
   if (this.$table.hasClass("focus-on")) {
     var expanded = $(row).hasClass("focused");
     this.clearAllFocus();
     if (!expanded) {
       this.$bodyRows.addClass("unfocused");
       $(row).addClass("focused");
     }
   }
 };
 ResponsiveTable.prototype.displayAll = function(activate, trigger) {
   if (this.$displayAllBtn) {
     this.$displayAllBtn.toggleClass("btn-primary", activate);
   }
   this.$table.toggleClass("display-all", activate);
   if (this.$tableClone) {
     this.$tableClone.toggleClass("display-all", activate);
   }
   if (trigger) {
     $(window).trigger(this.displayAllTrigger);
   }
 };
 ResponsiveTable.prototype.preserveDisplayAll = function() {
   var displayProp = "table-cell";
   if ($("html").hasClass("lt-ie9")) {
     displayProp = "inline";
   }
   $(this.$table).find("th, td").css("display", displayProp);
   if (this.$tableClone) {
     $(this.$tableClone).find("th, td").css("display", displayProp);
   }
 };
 ResponsiveTable.prototype.createStickyTableHeader = function() {
   var that = this;
   that.$tableClone = that.$table.clone();
   that.$tableClone.prop("id", this.id + "-clone");
   that.$tableClone.find("[id]").each(function() {
     $(this).prop("id", $(this).prop("id") + "-clone");
   });
   that.$tableClone.wrap('<div class="sticky-table-header"/>');
   that.$stickyTableHeader = that.$tableClone.parent();
   that.$stickyTableHeader.css("height", that.$thead.height() + 2);
   that.$table.before(that.$stickyTableHeader);
   $(this.options.mainContainer).bind("scroll", function() {
     $.proxy(that.updateStickyTableHeader(), that);
   });
   $(window).bind("resize", function(canCreateDiscussions) {
     $.proxy(that.updateStickyTableHeader(), that);
   });
   $(that.$tableScrollWrapper).bind("scroll", function() {
     $.proxy(that.updateStickyTableHeader(), that);
   });
   that.useFixedSolution = !isIOS() || 8 <= function() {
     {
       if (isIOS()) {
         var dfY1 = parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ""])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", ""));
         return dfY1;
       }
       return 0;
     }
   }();
   if (that.useFixedSolution) {
     that.$tableScrollWrapper.addClass("fixed-solution");
   } else {
     that.$tableScrollWrapper.addClass("absolute-solution");
   }
 };
 ResponsiveTable.prototype.updateStickyTableHeader = function() {
   var width;
   var that = this;
   var h = 0;
   var y1 = that.$table.offset().top;
   var t = $(this.options.mainContainer).scrollTop() - 1;
   var y2 = that.$table.height() - that.$stickyTableHeader.height();
   var INCR = t + $(this.options.mainContainer).height() - $(document).height();
   var s = 0;
   if ($(that.options.fixedNavbar).length) {
     t = t + (s = $(that.options.fixedNavbar).first().height());
   }
   if (width = this.options.mainContainer === window ? y1 < t && t < y1 + that.$table.height() : y1 <= 0 && -y1 < that.$table.height(), that.useFixedSolution) {
     if (that.$stickyTableHeader.scrollLeft(that.$tableScrollWrapper.scrollLeft()), h = s - 1, this.options.mainContainer === window && y2 < t - y1 ? (h = h - (t - y1 - y2), that.$stickyTableHeader.addClass("border-radius-fix")) : this.options.mainContainer !== window && y2 < -y1 ? (h = h - (-y1 - y2), that.$stickyTableHeader.addClass("border-radius-fix")) : that.$stickyTableHeader.removeClass("border-radius-fix"), width) {
       return void that.$stickyTableHeader.css({
         visibility : "visible",
         top : h + "px",
         width : that.$tableScrollWrapper.innerWidth() + "px"
       });
     }
     that.$stickyTableHeader.css({
       visibility : "hidden",
       width : "auto"
     });
   } else {
     if ((h = this.options.mainContainer === window ? t - y1 - 1 : -y1 - 1) < 0) {
       h = 0;
     } else {
       if (y2 < h) {
         h = y2;
       }
     }
     if (this.options.mainContainer === window && 0 < INCR) {
       h = h - INCR;
     }
     if (width) {
       that.$stickyTableHeader.css({
         visibility : "visible"
       });
       that.$stickyTableHeader.animate({
         top : h + "px"
       }, 400);
       that.$thead.css({
         visibility : "hidden"
       });
     } else {
       that.$stickyTableHeader.animate({
         top : "0"
       }, 400, function() {
         that.$thead.css({
           visibility : "visible"
         });
         that.$stickyTableHeader.css({
           visibility : "hidden"
         });
       });
     }
   }
 };
 ResponsiveTable.prototype.setupTableHeader = function() {
   var that = this;
   that.$hdrCells.each(function(i) {
     var $th = $(this);
     var id = $th.prop("id");
     var test = $th.text();
     if (id || (id = that.idPrefix + i, $th.prop("id", id)), "" === test && (test = $th.attr("data-col-name")), $th.is("[data-priority]") && -1 !== $th.data("priority")) {
       var a = $('<li class="checkbox-row"><input type="checkbox" name="toggle-' + id + '" id="toggle-' + id + '" value="' + id + '" /> <label for="toggle-' + id + '">' + test + "</label></li>");
       var s = a.find("input");
       that.$dropdownContainer.append(a);
       a.click(function() {
         s.prop("checked", !s.prop("checked"));
         s.trigger("change");
       });
       if ($("html").hasClass("lt-ie9")) {
         s.click(function() {
           $(this).trigger("change");
         });
       }
       a.find("label").click(function(event) {
         event.stopPropagation();
       });
       a.find("input").click(function(event) {
         event.stopPropagation();
       }).change(function() {
         var e = $(this);
         var masterVideoId = e.val();
         var syncedAnimals = that.$tableWrapper.find("#" + masterVideoId + ", #" + masterVideoId + "-clone, [data-columns~=" + masterVideoId + "]");
         if (that.$table.hasClass("display-all")) {
           $.proxy(that.preserveDisplayAll(), that);
           that.$table.removeClass("display-all");
           if (that.$tableClone) {
             that.$tableClone.removeClass("display-all");
           }
           that.$displayAllBtn.removeClass("btn-primary");
         }
         syncedAnimals.each(function() {
           var $cell = $(this);
           if (e.is(":checked")) {
             if (!$cell.closest("thead").length && "none" !== $cell.css("display")) {
               var newColSpan = Math.min(parseInt($cell.prop("colSpan")) + 1, $cell.attr("data-org-colspan"));
               $cell.prop("colSpan", newColSpan);
             }
             $cell.show();
           } else {
             if (!$cell.closest("thead").length && 1 < parseInt($cell.prop("colSpan"))) {
               $cell.prop("colSpan", parseInt($cell.prop("colSpan")) - 1);
             } else {
               $cell.hide();
             }
           }
         });
       }).bind("updateCheck", function() {
         if ("none" !== $th.css("display")) {
           $(this).prop("checked", true);
         } else {
           $(this).prop("checked", false);
         }
       });
     }
   });
   if (!$.isEmptyObject(this.headerRowIndices)) {
     that.setupRow(this.$thead.find("tr:eq(1)"), this.headerRowIndices);
   }
 };
 ResponsiveTable.prototype.setupBodyRows = function() {
   var that = this;
   that.$bodyRows.each(function() {
     that.setupRow($(this), that.headerColIndices);
   });
 };
 ResponsiveTable.prototype.setupRow = function($row, indices) {
   var that = this;
   if (!$row.data("setup")) {
     $row.data("setup", true);
     var i = 0;
     $row.find("th, td").each(function() {
       var $cell = $(this);
       var columnsAttr = "";
       var colSpan = $cell.prop("colSpan");
       $cell.attr("data-org-colspan", colSpan);
       if (1 < colSpan) {
         $cell.addClass("spn-cell");
       }
       var j = i;
       for (; j < i + colSpan; j++) {
         columnsAttr = columnsAttr + " " + that.idPrefix + indices[j];
         var dataPriority = that.$table.find("#" + that.idPrefix + indices[j]).attr("data-priority");
         if (dataPriority) {
           $cell.attr("data-priority", dataPriority);
         }
       }
       columnsAttr = columnsAttr.substring(1);
       $cell.attr("data-columns", columnsAttr);
       i = i + colSpan;
     });
   }
 };
 ResponsiveTable.prototype.buildHeaderCellIndices = function() {
   var that = this;
   var rowspansBeforeIndex = {};
   this.headerColIndices = {};
   this.headerRowIndices = {};
   var rowIndex = 0;
   var rowPadding = 0;
   if (this.$thead.find("tr").first().find("th").each(function(_) {
     var $cell = $(this);
     var colGroup = $cell.prop("colSpan");
     var rowSpan = $cell.prop("rowSpan");
     var cellIndex = 0;
     for (; cellIndex < colGroup; cellIndex++) {
       that.headerColIndices[rowIndex + _ + cellIndex] = _;
       if (0 <= rowIndex + _ + cellIndex) {
         rowspansBeforeIndex[rowIndex + _ + cellIndex - rowPadding] = rowPadding;
       }
     }
     if (1 < rowSpan) {
       rowPadding++;
     }
     rowIndex = rowIndex + (colGroup - 1);
   }), 2 < this.$thead.find("tr").length) {
     throw new Error("This plugin doesnt support more than two rows in thead.");
   }
   if (2 === this.$thead.find("tr").length) {
     $(this.$thead.find("tr")[1]).find("th").each(function(cellIndex) {
       that.headerRowIndices[cellIndex] = that.headerColIndices[rowspansBeforeIndex[cellIndex] + cellIndex];
     });
   }
 };
 ResponsiveTable.prototype.update = function() {
   this.$bodyRows = this.$table.find("tbody, tfoot").find("tr");
   this.setupBodyRows();
   this.$tableClone.find("tbody, tfoot").remove();
   var $tbodyClone = this.$table.find("tbody, tfoot").clone();
   $tbodyClone.find("[id]").each(function() {
     $(this).prop("id", $(this).prop("id") + "-clone");
   });
   $tbodyClone.appendTo(this.$tableClone);
   this.$dropdownContainer.find("input").trigger("change");
 };
 ResponsiveTable.prototype.updateSpanningCells = function() {
   this.$table.find(".spn-cell").each(function() {
     var element = $(this);
     var capCoords = element.attr("data-columns").split(" ");
     var k = capCoords.length;
     var n = 0;
     var j = 0;
     for (; j < k; j++) {
       if ("none" === $("#" + capCoords[j]).css("display")) {
         n++;
       }
     }
     if (n !== k) {
       element.show();
     } else {
       element.hide();
     }
     element.prop("colSpan", Math.max(k - n, 1));
   });
 };
 var old = $.fn.responsiveTable;
 $.fn.responsiveTable = function(option) {
   return this.each(function() {
     var $this = $(this);
     var data = $this.data("responsiveTable");
     var options = $.extend({}, ResponsiveTable.DEFAULTS, $this.data(), "object" == (typeof option === "undefined" ? "undefined" : _typeof(option)) && option);
     if ("" !== options.pattern) {
       if (!data) {
         $this.data("responsiveTable", data = new ResponsiveTable(this, options));
       }
       if ("string" == typeof option) {
         data[option]();
       }
     }
   });
 };
 $.fn.responsiveTable.Constructor = ResponsiveTable;
 $.fn.responsiveTable.noConflict = function() {
   return $.fn.responsiveTable = old, this;
 };
 $(document).on("ready.responsive-table.data-api", function() {
   $(".table-responsive[data-pattern]").each(function() {
     var $tableScrollWrapper = $(this);
     $tableScrollWrapper.responsiveTable($tableScrollWrapper.data());
   });
 });
 $(document).on("click.dropdown.data-api", ".dropdown-menu .checkbox-row", function(event) {
   event.stopPropagation();
 });
 $(document).ready(function() {
   $("html").removeClass("no-js").addClass("js");
   if (void 0 !== window.matchMedia || void 0 !== window.msMatchMedia || void 0 !== window.styleMedia) {
     $("html").addClass("mq");
   } else {
     $("html").addClass("no-mq");
   }
   if ("ontouchstart" in window) {
     $("html").addClass("touch");
   } else {
     $("html").addClass("no-touch");
   }
 });
}(jQuery);